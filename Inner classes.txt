								Innner classes
								--------------

Date: 10th July 2016
--------------------
	Sometimes we can declare a class inside another class such type of classes are called Inner classes
	Inner classes concept introduced in 1.1 version to fix GUI bugs as part of Event handling but because of powerful
	feature and benefits of inner classes slowly programmers started using in regular coding also
	
	Without existing one type of object if there is no chance of existing another type of object then we should go for
	inner classes
	
	Example1:
		University consists of several departments. Without existing university there is no chance of existing department
		Hence we have to declare department class inside university class
			
					class University{	----->outer class
					
						class Department{ ----->inner class
						
						
						}
					
					}
					
	Example2:
		Without existing Car object there is no chance of existing Engine object. Hence we have to declare Engine class
		inside Car class
					
					class Car{	----->outer class
					
						class Engine{ ----->inner class
						
						
						}
					
					}
					
	Example3:
		Map is a group of key, value pairs and each key, value pair is called an Entry. Without existing Map object there
		is no chance of existing Entry object. Hence interface Entry is defined inside Map interface
					
					interface Map{	----> Outer interface
						
						interface Entry{---> Inner interface	
						
						}
					
					}
	
	Note: 
		1. Without existing outer class object there is no chance of existing inner class object
		2. The relation between outer class and inner class is not is-a relation and it is Has-a relationship
			(composition or aggreation)
		
	Based on position of declaration and behavior all inner classes are divided into 4 types
		1. Normal or regular inner classes
		2. Method local inner classes
		3. Anonymous inner classes
		4. Static nested classes
	
	1. Normal or Regular inner classes
	----------------------------------
		If we are declaring any named class directly inside a class without static modifier such type of inner class is called
		Normal or regular inner class
		
		Example1:-
		---------
					----class Outer{
					|	
					|		class Inner{	-----
					|							|
		Outer ----	|							|-- Normal or regular inner class
		.java		|		}				----|
					|		
					|	
					|---}
	
			javac Outer.java ---> Outer.class ,Outer$Inner.class
			
			java Outer RuntimeException: NoSuchMethodError:main
			java Outer$Inner RuntimeException: NoSuchMethodError:main
			
		
		Example2:
		---------
					class Outer{
						
						class Inner{
						
						}
						
						public static void main(String[] args){
						
							System.out.println("Outer class main method")
						}
					
					}
				java Outer: Outer class main method
				java Outer$Inner: RuntimeException : NoSuchMethodError: main
				
		Inside inner class we can't declare any static members. Hence we can't declare main method and we can't run
		inner class directly from command prompt
		
				class Outer{
					
					class Inner{
					
						public static void main(String[] args){
							System.out.println("Inner class main method")
						}
					}
				
				}
				javac Outer.java //Compile time error: Inner class cannot have static declarations
		
	
		Case 1: Accessing inner class code from static area of Outer class
		
		
				class Outer{
					
					class Inner{
					
						public void m1(){
							sop("Inner Class method");
						}
					}
					
					public static void main(String[] args){
					
						Outer o = new Outer();			-
														| --> Outer.inner i = new Outer().new Inner();
						Outer.Inner i = o.new Inner();	-
					
						i.m1(); -->// new Outer().new Inner().m1(); 
					}
					
				}
			
		Case 2: Accessing inner class code from instance area of Outer class
				
				class Outer{
					class Inner{
						
						public void m1(){
							sop("inner class method");
						}
					
					}
					public void m2(){
						Inner i = new Inner();
						i.m1();
					}
					public static void main(String[] args){
						Outer o = new Outer();
						o.m2();
					}
				}
		
		Case 3: Accessing inner class code from outside of outer class
		
				class Outer{
					class Inner{
					
						public void m1(){
							sop("inner class method");
						}
					}
				}
				class Test{
					public static void main(String[] args){
						Outer o = new Outer();
						Inner i = o.new Inner();
						i.m1();
					
					}
				
				}
				
									Accessing Inner class code
												|
												|
							-------------------------------------------------		
							|												|
							|												|
				case1:From static Area of outer class				case2:From instance area of Outer class
							(Or)													
				case3:From outside of outer class						Inner i = new Inner();
						Outer o = new Outer();							i.m1();
						Outer.inner i = o.new Inner();
							i.m1();
		
		
		From normal or regular inner class we can access both static and non-static members of outer class directly
		
				class Outer{
					int x=10;
					static int y =20;
					
					class Inner{
						public void m1(){
							sop(x);
							sop(y);
						
						}
					
					}
					public static void main(String[] args){
						new Outer().new Inner().m1();
					}
				
				
				}
				output: 
				1020
				
		Within the inner class this always refers to current inner class object. If we want to refer current outer class
		object we have to use Outer class name.this
		
						public class Outer{
							int x =10;
							class Inner{
								int x =100;
								public void m1(){
									int x =1000;
									System.out.println(x);
									System.out.println(this.x); //System.out.println(Inner.this.x);
									System.out.println(Outer.this.x);
								}
								
								
							}
							
							 public static void main(String []args){
								new Outer().new Inner().m1();
							 }
						}
			Output: 1000
					100
					10
		
		The only appliicable modifiers for outer classes are public, default, final, abstract, strictfp
		but for inner classes applicable modifiers are public, default, final, abstract, strictfp, private, protected, static
		
	Nesting of inner classes
	------------------------
		Inside inner class we can declare another inner class i.e., nesting of inner classes is possible
		
					class A{
						class B{
							class C{
								public void m1(){
									sop("inner most class method");
								}
							
							}
						
						}
					
					}
					class Test{
						public static void main(String[] args){
							A a = new A();
							A.B b = a.new B();
							A.B.C c = b.new C();
							c.m1();
						}
					
					}
					output: inner most class method
		
	
Date: 11th July 2016
---------------------
	2. Method Local inner classes
	-----------------------------
		Sometimes we can declare a class inside a method such type of inner classes are called method local inner classes
		The main purpose of method local inner class is to define method specific repeatedly required functionality
		Method local inner classes are best suitable to meet nested method requirements
		
		We can access method local inner classes only within the method where we declare. Outside of the method we can't access
		because of its less scope Method local inner classes are most rarely used type of inner classes
		
		Example
		--------
					public class Outer{
        
						public void m1(){
							
							class Inner{
								
								public void sum(int x, int y){
									
									System.out.println("Sum is "+(x+y));
								}
								
							}
							Inner i = new Inner();
							i.sum(10,20);
							i.sum(100,200);
							i.sum(1000,2000);
							
						}
						 public static void main(String []args){
							
							Outer h = new Outer();
							h.m1();
							
						 }
				}
			Output: 
				Sum is 30
				Sum is 300
				Sum is 3000
		
		We can declare method local inner class inside both instance and static methods
		
		If we declare inner class inside instance method then from that method local inner class we can access both static
		and non-static members of outer class directly
		
		If we declare inner class inside static method then we can access only static members of outer class directly
		from that method local inner class
		
			class Test{
				int x=10;
				static int y =20;
				
				public void m1(){ 
					class Inner{
					
						public void m2(){
							sop(x);	------>(1)				O/P: 10
							sop(y);	 							 20		
						}	
					}
					
				}
				public static void main(String[] args){
					new Test().m1();
					
				}
			}
			--// if we declare m1() method is static will get compile time error at line(1) saying
			"non-static variables can't be referenced from a static context"
		
		From method local inner class we can't access local variables of the method in which we declare inner class
		If the local variable declared as final then we can access
		
				class Test{
					public void m1(){
						int x =10;
						class Inner{
							public void m2(){
								sop(x);
							}
						}
						Inner i = new Inner();
						i.m2();
					}
					public static void main(String[] args){
						new Test().m1();
					}
				
				}
				Compile time error: Local variable x is accessed from within inner class; needs to be declared final
			If we declare x is final then we dont get compile time error

		Question1:
			Consider the following code 
				class Test{
					int i=10;
					static int j =20;
					public void m1(){
						int k =30;
						final int m = 40;
						class Inner{
						
							public void m2(){
								//---Line(1)
							}
						}
					
					}
				
				}
			
			Which variables can access directly at Line(1)
				i,j,m1
		Question2:
			If we declare m1() is static then at Line(1) which variables we can access directly
				j,m
		Question3:
			If we declare m2() as static then at Line(1), which variables we can access directly 
				We will get compile time error because we can't declare static members inside inner classes

				
		The only applicable modifiers method local inner classes are abstract, final, strictfp. If we are trying to 
		apply other modifiers we will try compile time error
		
Date:12th July 2016
-------------------

	Anonymous inner class
	---------------------
		Sometimes we can declare inner class without name such type of inner classes are called Anonymous inner classes
		The main purpose of anonymous inner classes is just for instant use(one time usage)
		Based on declaration and behavior there are three types of anonymous inner classes
			1. Anonymous inner class that extends a class
			2. Anonymous inner class that implements an interface
			3. Anonymous inner class that define inside arguments
		

Date:31st August 2016
----------------------
		
		1. Anonymous inner class that extends a class
		---------------------------------------------
			
			Example:
			
			class PopCorn{
    
				public void taste(){
					
					System.out.println("salty");
					
				}
			}


			public class HelloWorld{

				 public static void main(String []args){
					PopCorn p = new PopCorn(){
					
						public void taste(){
					
						   System.out.println("spicy");
					
						}       
						
					};
				p.taste();
				
				PopCorn p1 = new PopCorn();
				p1.taste();
				
				PopCorn p2 = new PopCorn(){
					
						public void taste(){
					
						   System.out.println("sweet");
					
						}       
						
					};
				 
				 p2.taste();
				 
				 System.out.println(p.getClass().getName());
				 System.out.println(p1.getClass().getName());
				 System.out.println(p2.getClass().getName());
				 }
			}
		The generated .class files are PopCorn.class, HelloWorld.class, HelloWorld$1.class, HelloWorld$2.class
		Output:
		
			spicy                                                
			salty                                           
			sweet                                           
			HelloWorld$1                                    
			PopCorn                                         
			HelloWorld$2
		
		Analysis:
			1. PopCorn p = new PopCorn(); Just we are creating PopCorn object
			2. PopCorn p = new PopCorn(){}; 
					we are declaring a class that extends PopCorn without name(Anonymous inner class)
					For that child class we are creating an object with parent reference
			
			3. PopCorn p = new PopCorn(){
					public void taste(){
						sop("spicy");
					}
				};
					we are declaring a class that extends PopCorn without name(Anonymous inner class)
					In that child class we are overrding taste()
					For that child class we are creating an object with parent reference
		
				
						Normal Class Approach				|					Anonymous Inner class Approach
		------------------------------------------------------------------------------------------------------------
				class MyThread extends Thread{				|	class Test{
					public void run(){						|		public static void main(String[] args){
						for(int i=1 ;i<10;i++){				|			Thread mt = new Thread(){		
							sop("child thread");			|				public void run(){
						}									|					for(int i=0;i<10;i++){
															|						sop("child thread");
					}										|					}
				}											|
				class Test{									|				}
					public static void main(String[] args){	|			};
						MyThread mt = new MyThread();		|			mt.start();
						mt.start();							|			for(int i = 1;i<10;i++){	
						for(int i = 1;i<10;i++){			|				sop("main thread");
							sop("main thread");				|			}
						}									|		}
					}										|	}		
				}											|			
		-------------------------------------------------------------------------------------------------------------------
		
		
		Anonymous inner class that implements an interface
		---------------------------------------------------
						Normal Class Approach				|					Anonymous Inner class Approach
		------------------------------------------------------------------------------------------------------------
				class MyRunnable implements Runnable{		|	class Test{
					public void run(){						|		public static void main(String[] args){
						for(int i=1 ;i<10;i++){				|			Runnable r = new Runnable(){		
							sop("child thread");			|				public void run(){
						}									|					for(int i=0;i<10;i++){
															|						sop("child thread");
					}										|					}
				}											|
				class Test{									|				}
					public static void main(String[] args){	|			};
						MyRunnable mr = new MyRunnable();	|			Thread t = new Thread(r);
						Thread t = new Thread(mr);			|			t.start();
						t.start();							|			for(int i = 1;i<10;i++){	
						for(int i = 1;i<10;i++){			|				sop("main thread");
							sop("main thread");				|			}
						}									|		}
					}										|	}		
				}											|			
		-------------------------------------------------------------------------------------------------------------------
		
		
		Anonymous inner class that define inside arguments
		--------------------------------------------------
				
				public class HelloWorld{

				 public static void main(String []args){
				   
				   new Thread(new Runnable(){
					   public void run(){
						   for(int i = 0;i<10;i++)
							System.out.println("child Thread");
						   
					   }
				   }).start();
					for(int i =0;i<10;i++){
						System.out.println("main Thread1");
					   
				   }
				 }
			}
			
	Normal Java class Vs Anonymous inner class
	------------------------------------------
		1. A normal java class can extend only one class at a time ofcourse anonymous inner class also can extend only
			one class at a time
		2. A normal java class can implement any number of interfaces simultaneously but anonymous inner class can implement
			only one interface at a time
		3. A normal java class can extend a class and can implement any number of interfaces simultaneously but anonymous 
			inner class can extend a class or can implement an interface but not both simultaneously
		
		In normal java class we can write any number of constructors but in anonymous inner classes we can't write any 
		constructor explicitly( because the name of the class and name of the constructor must be same but anonymous inner
		classes not having any name)
		
		Note: 
			If the requirement is standard and required several times then we should go for normal top level class.
			If the requirement is temporary and required only once (instant use) then we should go for anonymous inner class.
		
	
	static nested classes
	-----------------------
		Sometimes we can declare inner class with static modifier such type of inner classes are called static nested classes.
		In the case of normal or regular inner class without existing outer class object there is no chance of existing inner
		class object i.e., inner class object is strongly associated with outer class object but in the case of static nested
		classes without existing outer class object there may be a chance of existing nested class object. Hence static nested
		class object is not strongly associated with outer class object
		
			class Outer{
			
				static class Nested{
				
					public void m1(){
						sop("static nested class method");
					}
				
				}
				
				public static void main(String[] args){
					Nested n = new Nested();
					n.m1();
				}
			}
		If you want to create nested class object from outside of outer class then we can create as follows
				Outer.Nested n = new Outer.Nested();
		
		In normal or regular inner classes we can't declare any static members
		But in static nested classes we can declare static members including main method. Hence we can invoke static nested 
		class directly from command prompt
		
			class Outer{
				static class Nested{
					public static void main(String[] args){
						sop("static nested class main method");
					}
					
				}
				public static void main(String[] args){
					sop("outer class main method");
				}
			
			}
	
			Output:
				java Outer // outer class main method
				java Outer$Nested // static nested class main method
		
		From normal or regular inner classes we can access both static and non-static members of outer class directly.
		But from static nested classes we can access static members of outer class directly and we can't access non-static 
		members
			
			class Outer{
				int x =10;
				static int y =20;
				static Nested{
					public void m1(){
						sop(x);// compile time error: non-static variable cannot be referenced from a static context
						sop(y);
					}
				}
			
			}
		
		
		Differnces between normal or regular inner classes and static nested class
		---------------------------------------------------------------------------	
		
						Normal inner classes					|			static nested classes
		----------------------------------------------------------------------------------------------------------
			Without existing outer class object there is no 	|	Without existing outer class object there may	
			channce of existing inner class object i.e., inner	|	be a chance of existing static nested class 
			object is strongly associated with outer class		|	object i.e., static nested class object is not
			object												|	strongly associated with outer class object
																|
			We can't declare static members						|	In static nested classes we can declare static
																|	members	
																|
			In normal or regular inner class we can't declare	|	In static nested classes we can declare main
			main method	and hence we can't invoke inner class	|	method and hence we can invoke invoke nested
			directly from command prompt						|	class direclty from command prompt
																|
			We can access both static and non-static members	|	We can access only static members of outer 
			of outer class directly								|	class
			
			
	Various combination of nested classes and interfaces
	----------------------------------------------------
		
		case1:	class inside class
			without existing one type of object if there is no chance of existing another type of object then we can declare
			class insdide a class
				Eg: University consists of several Departments. Without existing University there is no chance of existing
					Department. Hence we have to declare Department class inside University class
						
							class University{
								
								class Department{
								
								
								}
								
							}
		
		case 2: interface inside a class
				Inside a class if we require multile implementations of an interface and all these implementations are related
				to a particular class then we can define interface inside a class
				
					class VehicleTypes{
						interface vehicle{
							public int getNoOfWheels();
						}
						class Bus implements Vehicle{
							public int getNoOfWheels(){
								return 6;
							}
						}
						
						class Car implements Vehicle{
							public int getNoOfWheels(){
								return 3;
							}
						}
					
					}
				
		case 3: interface inside interface	
				We can declare interface inside interface.
				A Map is a group of key value pairs. Each key, value pair is called an Entry. Without existing Map object there
				is no chance of existing Entry object. Hence interface Entry is defined inside Map interface
					
					interface Map{
					
						interface Entry{
						
						}
					}

1st September 2016
------------------
				Every interface present inside interface is always public and static whether we are declaring or not. Hence
				we can implement inner interface directly without implementing outer interface
				Similarly whenever we are implementing outer interface we are not required to implement inner interface i.e.,
				we can implement outer and inner interfaces independently
						
						interface Outer{
							void m1();
							interface Inner{
								void m2();
							}
						}
						class Test1 implements Outer{
							public void m1(){
								sop("Outer interface method implementation");
							}
						}
						class Test2 implements Outer.Inner{
							public void m2(){
								sop("Inner interface method implementation");
							}
						}
						class TestDemo{
							public static void main(String[] args){
								Test1 t1 = new Test1();
								t1.m1();
								Test2 t2 = new Test2();
								t2.m2();
							}
						
						}
				
		case 4: class inside interface
		------------------------------
			If functionality of a class is closely associated with interface then it is higly recommended to declare class
			inside interface.
			Eg. 		
					interface EmailService{
						public void sendEmail(EmailDetails e);
						class EmailDetails{
							String toList;
							String ccList;
							String subject;
							String body;
						
						}
			
					}
			In the above example EmailDetails is required only for EmailService and we are not using anywhere else. Hence
			EmailDetails class is recommended to declare inside EmailService interface
			We can also define a class inside interface to provide default implementation for that interface
			
			interface Vehicle{
				
				int getNoOfWheels();
				class DefaultVehicle implements Vehicle{
					public int getNoOfWheels(){
						return 2;
						
					}
					
				}
				
			}


			public class HelloWorld{

				 public static void main(String []args){
					Vehicle.DefaultVehicle v = new Vehicle.DefaultVehicle();
					System.out.println(v.getNoOfWheels());
				}
			}
			A class which inside interface is always public static whether we are declaring or not. Hence we can create 
			class object directly without having outer interface type object
			
	Conclusions
	-----------
		Among classes and interfaces we can declare anything inside anything 
		
		class A{					class A{					interface A{					interface A{
			class B{					interface B{				interface B{					class B{
				
			}							}							}								}
		}							}							}								}
		VALID							VALID						VALID							VALID
					
		The interface which is declare inside interface is always public and static whether we are declaring or not
		The class which is declare inside interface is always public and static whether we are declaring or not
		The interface which is declared inside a class is always static but need not be public